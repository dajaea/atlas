{"topic": "singularity", "english_title": "", "english": "", "chinese_title": "Singularity ", "chinese": "SINGULARITY, an experimental operating system, is designed and developed by Microsoft Research Institutes from 2003 to 2010. The core, drive program, and application of the operating system are written in \"controlled code\". The system \"Singularity\" is fully refurbished in design, which is no longer based on its performance as the primary standard. The Singularity operating system will apply Microsoft's most advanced technologies in system build, write programs, such as one of SINGULARITY: Software ISOLATED Processes, SIPs will be completed using the type of security programming language and streamlined instructions. Ensure the height independence between the system operation. SIP guarantees that each program, driver, and system extension components are running within a separate SIP, and do not allow each other to share memory or modify their own code, enhance the stability of the system.\nMicrosoft will announce more detailed technical information in the near future.\nSingularity's low X86 interrupt is written in assembly language and C language. Once these code work, it will call the core, the core runtime code and the garbage collector are written in the C\u266f language and run in non-secure mode. Singularity's hardware abstraction layer is written in C ++ language and runs in safe mode. And some C code is responsible for debugging work. The BIOS of the computer is only called only in the 16-bit real mode bootstrap phase; once the system enters the 32-bit element mode, Singularity will never call the BIOS, and change to the device driver code written by SING. When installing, the CIL form OPCode will be compiled as an x86-morphist-based opcode by Bartok (page archive backup, existing in the Internet Archive). BARTOK is an early optimization compiler written in C #.\nSource code and / or disk mirroring will be available when the project is completed.\n\n\n== Design ==\nSingularity is a microner operating system; in any case, different components of Singularity are not running within a separate address space (process), but each software independent process (SIP) is assigned to a separate single address. space. These SIP behaviors are similar to a normal process, but SIP will not request overhead penalty when the task schedule is scheduled. The protection of the system is provided by an invariant (Invariant) set, such as memory invariance, there is no interactive reference (or cycling memory pointer) between two SIPs within the maintenance memory. This rule will check at the application installation phase and must not be violated, otherwise Singularity will disable installation (note: Singularity system is installed entirely by operating system management).\nMost uncarreated relying on the use of safety mechanisms, such as Java language or C #, these languages \u200b\u200bhave garbage collection mechanisms, no specific pointers and code can be verified by some computer security policy.\n\n\n== Version history ==\n2007: SINGULARITY 1.0\nMarch 2007: SINGULARITY 1.1\nDecember 14, 2008: SINGULARITY 2.0\n\n\n== See ==\nSing \u266f\nSPEC \u266f\n\n\n== External link ==\nOfficial homepage (page archive backup, existing internet archive)\nSINGULARITY Design Motivation (PDF)\nDetailed Overview of The Singular Project (PDF)\nChannel9 Thread, with interview of Jim Larus and galen hunt (page archive backup, existing internet archive)\nThe JX Operating System (PDF) (Page Archiving Backup, ANOTHER OPERATING SYSTEM SIMILAR in Concept "}